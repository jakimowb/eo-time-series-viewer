#
import json
import os
import sys
from pathlib import Path

import numpy as np
from PyQt5.QtCore import QDateTime, Qt
from PyQt5.QtWidgets import QDockWidget, QListWidget
from qgis._core import QgsApplication, QgsMultiBandColorRenderer, QgsRasterLayer, QgsRectangle, QgsVectorLayer

from eotimeseriesviewer.forceinputs import FindFORCEProductsTask
from eotimeseriesviewer.mapcanvas import MapCanvas
from eotimeseriesviewer.qgispluginsupport.qps.utils import SpatialExtent
from eotimeseriesviewer.sensors import SensorInstrument
from qgis.PyQt.QtCore import QSize
from qgis.PyQt.QtWidgets import QApplication, QWidget
from eotimeseriesviewer import DIR_REPO, initAll
from eotimeseriesviewer.main import EOTimeSeriesViewer
from eotimeseriesviewer.tests import EOTSVTestCase, FORCE_CUBE, start_app

app = start_app()
initAll()

DIR_SCREENSHOTS = DIR_REPO / f'doc/source/img/autogenerated.{sys.platform}'
os.makedirs(DIR_SCREENSHOTS, exist_ok=True)

DATE_OF_INTEREST = np.datetime64('2014-07-02')


class CreateScreenshots(EOTSVTestCase):

    def setSensorNames(self, eotsv: EOTimeSeriesViewer):

        s = ""
        for sensor in eotsv.sensors():
            assert isinstance(sensor, SensorInstrument)
            sid = json.loads(sensor.id())
            if sid['nb'] == 6:
                sensor.setName('Landsat')
                sensorLS = sensor
            elif sid['nb'] == 5:
                sensor.setName('RapidEye')
                sensorRE = sensor

    def test_main_gui(self):
        DOI = QDateTime.fromString('2014-06-24', Qt.ISODate)
        EOI = QgsRectangle(681557.9600758770247921, -752579.3792036195518449,
                           682637.9600758770247921, -751717.1211391034303233)
        SOI = QSize(1200, 650)
        TSV = EOTimeSeriesViewer()
        TSV.setMapSize(QSize(150, 175))

        TSV.loadExampleTimeSeries(loadAsync=False)

        # set up example settings
        sidLS = sidRE = None

        for sensor in TSV.sensors():
            assert isinstance(sensor, SensorInstrument)
            sid = json.loads(sensor.id())
            if sid['nb'] == 6:
                sidLS = sensor.id()
                sensor.setName('Landsat')
                sensorLS = sensor
            elif sid['nb'] == 5:
                sidRE = sensor.id()
                sensor.setName('RapidEye')
                sensorRE = sensor

        TSV.setMapsPerMapView(4, 1)
        TSV.setCurrentDate(DOI)
        TSV.setSpatialExtent(EOI)
        self.taskManagerProcessEvents()
        center = TSV.timeSeries().maxSpatialExtent().spatialCenter()
        TSV.focusTimeSeriesDateVisibility()
        # add second MapView
        TSV.createMapView()
        mv1, mv2 = TSV.mapViews()
        mv1.setName('True Color')
        mv2.setName('NIR-SWIR-R')

        QgsApplication.processEvents()
        self.taskManagerProcessEvents()
        for mc in mv1.mapCanvases():
            setBandCombination(mc, sidLS, 3, 2, 1)
            setBandCombination(mc, sidRE, 3, 2, 1)
        for mc in mv2.mapCanvases():
            setBandCombination(mc, sidLS, 4, 5, 3)
            setBandCombination(mc, sidRE, 5, 4, 3)

        TSV.loadCurrentTemporalProfile(TSV.spatialCenter())
        self.taskManagerProcessEvents()
        for lyr in mv1.layers():
            if isinstance(lyr, QgsVectorLayer):
                TSV.showAttributeTable(lyr)
        TSV.ui.resize(SOI)
        QgsApplication.processEvents()
        self.showGui(TSV.ui)
        TSV.close()

    def test_FORCE_Data(self):

        DOI = QDateTime.fromString('2017-07-18', Qt.ISODate)
        EOI = QgsRectangle(4328373.3628286831080914, 3192912.9115299843251705,
                           4330201.7091372087597847, 3194741.2578385099768639)
        SOI = QSize(1200, 650)
        TSV = EOTimeSeriesViewer()

        task = FindFORCEProductsTask('BOA', FORCE_CUBE)
        task.run()
        files = task.files()  # [0:1]

        TSV.setMapSize(QSize(200, 200))

        TSV.addTimeSeriesImages(files)
        self.taskManagerProcessEvents()

        sidLS = None
        for sensor in TSV.sensors():
            assert isinstance(sensor, SensorInstrument)
            sid = json.loads(sensor.id())
            # '6bands@30.0m'
            if sid['nb'] == 6:
                sidLS = sensor.id()
                sensor.setName('Landsat')
                sensorLS = sensor

        TSV.setMapsPerMapView(4, 1)
        TSV.createMapView()
        mv1, mv2 = TSV.mapViews()
        mv1.setName('True Color')
        mv2.setName('NIR-SWIR-R')
        QgsApplication.processEvents()

        for mc in mv1.mapCanvases():
            setBandCombination(mc, sidLS, 3, 2, 1)

        for mc in mv2.mapCanvases():
            setBandCombination(mc, sidLS, 4, 5, 3)

        TSV.setCurrentDate(DOI)
        TSV.setSpatialExtent(EOI)
        TSV.ui.resize(SOI)
        QgsApplication.processEvents()

        self.showGui(TSV.ui)
        TSV.close()

    def test_others(self):

        # makePNG(TS.ui, 'mainGUI')

        TSV.ui.resize(QSize(1000, 600))

        QApplication.processEvents()

        widget = TSV.ui
        makePNG(widget, 'maingui')

        makePNG(widget, 'mapViews')

        for dockWidget in TSV.ui.findChildren(QDockWidget):
            assert isinstance(dockWidget, QDockWidget)
            # dockWidget.setFloating(True)
            name = dockWidget.objectName()
            dSize = dockWidget.size()
            # change sizes
            if name == 'cursorLocationInfoPanel':
                dockWidget.reloadCursorLocation()
                dockWidget.resize(QSize(300, 300))
                dockWidget.update()
                makePNG(dockWidget, name)

            if name == 'mapViewPanel':
                # dockWidget.setCurrentMapView(mv1)
                # dockWidget.resize(QSize(300, 600))
                dockWidget.update()
                makePNG(dockWidget, name)

            if name == 'sensorPanel':
                # dockWidget.setFixedHeight(200)
                dockWidget.resize(QSize(330, 125))
                makePNG(dockWidget, name)

            if name == 'systemInfoPanel':
                dockWidget.setFixedHeight(400)
                makePNG(dockWidget, name)

            if name == 'spectralLibraryPanel':
                dockWidget.resize(QSize(800, 250))

                makePNG(dockWidget, name)

            if name == 'temporalProfilePanel':
                dockWidget.resize(QSize(800, 250))
                for i in range(dockWidget.listWidget.count()):
                    assert isinstance(dockWidget.listWidget, QListWidget)
                    dockWidget.listWidget.setCurrentRow(i)
                    page = dockWidget.stackedWidget.currentWidget()
                    pageName = page.objectName()
                    page.update()

                    if pageName == 'page2D':
                        dockWidget.plotWidget2D.update()
                    elif pageName == 'page3D' and dockWidget.plotWidget3D is not None:

                        dockWidget.plotWidget3D.update()
                        dockWidget.plotWidget3D.paintGL()
                        # dockWidget.plotWidget3D.repaint()
                    dockWidget.repaint()
                    makePNG(dockWidget, '{}.{}'.format(name, pageName))

            if name == 'timeseriesPanel':
                dockWidget.resize(QSize(800, 250))
                makePNG(dockWidget, name)

            # dockWidget.setFloating(False)


def widgetScreenshot(widget, path):
    assert isinstance(widget, QWidget)

    rect = widget.rect()
    pixmap = widget.grab()
    # pixmap = QPixmap(rect.size())
    # widget.render(pixmap, QPoint(), QRegion(rect))
    pixmap.save(path, quality=100)

    def widgetScreenshot(widget, path):
        path = Path(path)
        assert isinstance(widget, QWidget)
        QgsApplication.processEvents()
        rect = widget.rect()
        pixmap = widget.grab()

        # pixmap = QPixmap(rect.size())
        # widget.render(pixmap, QPoint(), QRegion(rect))

        pixmap.save(path.as_posix(), quality=100)


def makePNG(widget, name):
    path = os.path.join(DIR_SCREENSHOTS, name + '.png')
    widgetScreenshot(widget, path)


def setBandCombination(c: MapCanvas, sid, r, g, b):
    c.timedRefresh()
    for lyr in c.layers():
        if isinstance(lyr, QgsRasterLayer) and sid == lyr.customProperty('eotsv/sensor'):
            renderer = lyr.renderer()
            assert isinstance(renderer, QgsMultiBandColorRenderer)
            renderer.setRedBand(r)
            renderer.setGreenBand(g)
            renderer.setBlueBand(b)
            lyr.setRenderer(renderer.clone())
            c.stretchToExtent(SpatialExtent.fromMapCanvas(c), 'linear_minmax', p=0.05)
    c.timedRefresh()
