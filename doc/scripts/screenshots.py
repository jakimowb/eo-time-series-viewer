#
import json
import os
import sys
from pathlib import Path

import numpy as np
from PyQt5.QtCore import QDateTime, QMetaType, Qt
from PyQt5.QtWidgets import QDockWidget, QListWidget
from qgis._core import Qgis, QgsApplication, QgsCoordinateReferenceSystem, QgsField, QgsFields, \
    QgsMultiBandColorRenderer, QgsRasterLayer, QgsRectangle, QgsVectorLayer

from qgis.PyQt.QtCore import QSize
from qgis.PyQt.QtWidgets import QApplication, QWidget
from qgis.core import edit
from eotimeseriesviewer import DIR_REPO, initAll
from eotimeseriesviewer.forceinputs import FindFORCEProductsTask
from eotimeseriesviewer.labeling.editorconfig import LabelShortcutType
from eotimeseriesviewer.labeling.quicklabeling import createQuickLabelField
from eotimeseriesviewer.main import EOTimeSeriesViewer
from eotimeseriesviewer.mapvisualization import MapView
from eotimeseriesviewer.qgispluginsupport.qps.utils import SpatialExtent
from eotimeseriesviewer.sensors import SensorInstrument
from eotimeseriesviewer.tests import EOTSVTestCase, FORCE_CUBE, start_app, TestObjects

app = start_app()
initAll()

DIR_SCREENSHOTS = DIR_REPO / f'doc/source/img/autogenerated.{sys.platform}'
os.makedirs(DIR_SCREENSHOTS, exist_ok=True)

DATE_OF_INTEREST = np.datetime64('2014-07-02')


class CreateScreenshots(EOTSVTestCase):

    def setSensorNames(self, eotsv: EOTimeSeriesViewer):

        s = ""
        for sensor in eotsv.sensors():
            assert isinstance(sensor, SensorInstrument)
            sid = json.loads(sensor.id())
            if sid['nb'] == 6:
                sensor.setName('Landsat')
                sensorLS = sensor
            elif sid['nb'] == 5:
                sensor.setName('RapidEye')
                sensorRE = sensor

    def test_main_gui(self):
        DOI = QDateTime.fromString('2014-06-24', Qt.ISODate)
        EOI = QgsRectangle(681557.9600758770247921, -752579.3792036195518449,
                           682637.9600758770247921, -751717.1211391034303233)
        SOI = QSize(1200, 650)
        TSV = EOTimeSeriesViewer()
        TSV.setMapSize(QSize(150, 175))

        TSV.loadExampleTimeSeries(loadAsync=False)
        TSV.ui.show()
        QgsApplication.processEvents()
        self.taskManagerProcessEvents()

        sidLS, sidRE = self.prepareExampleDataSensors(TSV)

        TSV.setMapsPerMapView(4, 1)
        TSV.setCurrentDate(DOI)
        TSV.setSpatialExtent(EOI)

        center = TSV.timeSeries().maxSpatialExtent().spatialCenter()
        TSV.focusTimeSeriesDateVisibility()
        # add second MapView
        TSV.createMapView()
        mv1, mv2 = TSV.mapViews()
        mv1.setName('True Color')
        mv2.setName('NIR-SWIR-R')

        TSV.mapWidget().timedRefresh()  # ensure that layers are loaded

        QgsApplication.processEvents()
        self.taskManagerProcessEvents()
        setBandCombination(mv1, sidLS, 3, 2, 1)
        setBandCombination(mv1, sidRE, 3, 2, 1)
        setBandCombination(mv2, sidLS, 4, 5, 3)
        setBandCombination(mv2, sidRE, 5, 4, 3)
        stretchToExtent(mv1)
        stretchToExtent(mv2)

        TSV.loadCurrentTemporalProfile(TSV.spatialCenter())
        self.taskManagerProcessEvents()
        for lyr in mv1.layers():
            if isinstance(lyr, QgsVectorLayer):
                TSV.showAttributeTable(lyr)
        TSV.ui.resize(SOI)

        TSV.mapWidget().timedRefresh()

        self.showGui(TSV.ui)
        TSV.close()

    def prepareExampleDataSensors(self, TSV):
        # set up example settings
        sidLS = sidRE = None
        self.taskManagerProcessEvents()
        for sensor in TSV.sensors():
            assert isinstance(sensor, SensorInstrument)
            sid = json.loads(sensor.id())
            if sid['nb'] == 6:
                sidLS = sensor.id()
                sensor.setName('Landsat')
                sensorLS = sensor
            elif sid['nb'] == 5:
                sidRE = sensor.id()
                sensor.setName('RapidEye')
                sensorRE = sensor
        return sidLS, sidRE

    def test_quick_labeling(self):

        DOI = QDateTime.fromString('2014-06-24', Qt.ISODate)
        eotsv = EOTimeSeriesViewer()
        eotsv.loadExampleTimeSeries(loadAsync=False)

        eotsv.setMapsPerMapView(4, 1)
        eotsv.setCurrentDate(DOI)
        sidLS, sidRE = self.prepareExampleDataSensors(eotsv)

        QgsApplication.processEvents()
        self.taskManagerProcessEvents()

        mv = eotsv.mapViews()[0]
        mv.setName('NIR-SWIR-R')
        mv.layers()

        QgsApplication.processEvents()
        self.taskManagerProcessEvents()

        setBandCombination(mv, sidRE, 5, 4, 3)
        setBandCombination(mv, sidLS, 4, 5, 3)
        stretchToExtent(mv)

        self.showGui(eotsv.ui)

    def test_quick_labeling_label_groups(self):
        DOI = QDateTime.fromString('2014-06-24', Qt.ISODate)
        eotsv = EOTimeSeriesViewer()
        eotsv.loadExampleTimeSeries(loadAsync=False)
        eotsv.setMapsPerMapView(4, 1)
        eotsv.setCurrentDate(DOI)
        sidLS, sidRE = self.prepareExampleDataSensors(eotsv)

        mv = eotsv.mapViews()[0]
        mv.setName('NIR-SWIR-R')
        mv.layers()

        QgsApplication.processEvents()
        self.taskManagerProcessEvents()

        setBandCombination(mv, sidRE, 5, 4, 3)
        setBandCombination(mv, sidLS, 4, 5, 3)
        stretchToExtent(mv)

        QgsApplication.processEvents()
        self.taskManagerProcessEvents()
        test_dir = self.createTestOutputDirectory()

        path = test_dir / 'landclearing.gpkg'
        # lyr = TestObjects.createVectorLayer(path=path)
        lyr = TestObjects.createEmptyMemoryLayer(QgsFields(), wkbType=Qgis.WkbType.Polygon)
        lyr.setCrs(QgsCoordinateReferenceSystem('EPSG:4326'))
        lyr.setName('land_clearing')
        with edit(lyr):
            lyr.addAttribute(createQuickLabelField(
                LabelShortcutType.Date, 'def_date', QMetaType.QDate,
                group='deforestation'))
            lyr.addAttribute(createQuickLabelField(
                LabelShortcutType.SourceImage, 'def_img', QMetaType.QString,
                group='deforestation'))
            lyr.addAttribute(createQuickLabelField(
                LabelShortcutType.Date, 'bur_date', QMetaType.QDate,
                group='burning'))
            lyr.addAttribute(createQuickLabelField(
                LabelShortcutType.SourceImage, 'bur_img', QMetaType.QString,
                group='burning'))
            lyr.addAttribute(createQuickLabelField(
                LabelShortcutType.Date, 'til_date', QMetaType.QDate,
                group='tilling'))
            lyr.addAttribute(createQuickLabelField(
                LabelShortcutType.SourceImage, 'til_img', QMetaType.QString,
                group='tilling'))
            lyr.addAttribute(QgsField('note', QMetaType.QString))

        eotsv.addMapLayers([lyr])

        self.showGui(eotsv.ui)
        eotsv.close()

    def test_empty(self):

        eotsv = EOTimeSeriesViewer()

        self.showGui(eotsv.ui)
        eotsv.close()

    def test_FORCE_Data(self):

        DOI = QDateTime.fromString('2017-07-18', Qt.ISODate)
        EOI = QgsRectangle(4328373.3628286831080914, 3192912.9115299843251705,
                           4330201.7091372087597847, 3194741.2578385099768639)
        SOI = QSize(1200, 650)
        TSV = EOTimeSeriesViewer()

        task = FindFORCEProductsTask('BOA', FORCE_CUBE)
        task.run()
        files = task.files()  # [0:1]

        TSV.setMapSize(QSize(200, 200))

        TSV.addTimeSeriesImages(files)
        self.taskManagerProcessEvents()

        sidLS = None
        for sensor in TSV.sensors():
            assert isinstance(sensor, SensorInstrument)
            sid = json.loads(sensor.id())
            # '6bands@30.0m'
            if sid['nb'] == 6:
                sidLS = sensor.id()
                sensor.setName('Landsat')
                sensorLS = sensor

        TSV.setMapsPerMapView(4, 1)
        TSV.createMapView()
        mv1, mv2 = TSV.mapViews()
        mv1.setName('True Color')
        mv2.setName('NIR-SWIR-R')
        QgsApplication.processEvents()

        setBandCombination(mv1, sidLS, 3, 2, 1)
        setBandCombination(mv2, sidLS, 4, 5, 3)

        TSV.setCurrentDate(DOI)
        TSV.setSpatialExtent(EOI)
        TSV.ui.resize(SOI)
        QgsApplication.processEvents()

        self.showGui(TSV.ui)
        TSV.close()

    def test_others(self):

        # makePNG(TS.ui, 'mainGUI')
        TSV = EOTimeSeriesViewer()
        TSV.ui.resize(QSize(1000, 600))

        QApplication.processEvents()

        widget = TSV.ui
        makePNG(widget, 'maingui')

        makePNG(widget, 'mapViews')

        for dockWidget in TSV.ui.findChildren(QDockWidget):
            assert isinstance(dockWidget, QDockWidget)
            # dockWidget.setFloating(True)
            name = dockWidget.objectName()
            dSize = dockWidget.size()
            # change sizes
            if name == 'cursorLocationInfoPanel':
                dockWidget.reloadCursorLocation()
                dockWidget.resize(QSize(300, 300))
                dockWidget.update()
                makePNG(dockWidget, name)

            if name == 'mapViewPanel':
                # dockWidget.setCurrentMapView(mv1)
                # dockWidget.resize(QSize(300, 600))
                dockWidget.update()
                makePNG(dockWidget, name)

            if name == 'sensorPanel':
                # dockWidget.setFixedHeight(200)
                dockWidget.resize(QSize(330, 125))
                makePNG(dockWidget, name)

            if name == 'systemInfoPanel':
                dockWidget.setFixedHeight(400)
                makePNG(dockWidget, name)

            if name == 'spectralLibraryPanel':
                dockWidget.resize(QSize(800, 250))

                makePNG(dockWidget, name)

            if name == 'temporalProfilePanel':
                dockWidget.resize(QSize(800, 250))
                for i in range(dockWidget.listWidget.count()):
                    assert isinstance(dockWidget.listWidget, QListWidget)
                    dockWidget.listWidget.setCurrentRow(i)
                    page = dockWidget.stackedWidget.currentWidget()
                    pageName = page.objectName()
                    page.update()

                    if pageName == 'page2D':
                        dockWidget.plotWidget2D.update()
                    elif pageName == 'page3D' and dockWidget.plotWidget3D is not None:

                        dockWidget.plotWidget3D.update()
                        dockWidget.plotWidget3D.paintGL()
                        # dockWidget.plotWidget3D.repaint()
                    dockWidget.repaint()
                    makePNG(dockWidget, '{}.{}'.format(name, pageName))

            if name == 'timeseriesPanel':
                dockWidget.resize(QSize(800, 250))
                makePNG(dockWidget, name)

            # dockWidget.setFloating(False)


def widgetScreenshot(widget, path):
    assert isinstance(widget, QWidget)

    rect = widget.rect()
    pixmap = widget.grab()
    # pixmap = QPixmap(rect.size())
    # widget.render(pixmap, QPoint(), QRegion(rect))
    pixmap.save(path, quality=100)

    def widgetScreenshot(widget, path):
        path = Path(path)
        assert isinstance(widget, QWidget)
        QgsApplication.processEvents()
        rect = widget.rect()
        pixmap = widget.grab()

        # pixmap = QPixmap(rect.size())
        # widget.render(pixmap, QPoint(), QRegion(rect))

        pixmap.save(path.as_posix(), quality=100)


def makePNG(widget, name):
    path = os.path.join(DIR_SCREENSHOTS, name + '.png')
    widgetScreenshot(widget, path)


def stretchToExtent(mv: MapView):
    for c in mv.mapCanvases():
        c.timedRefresh()
        c.stretchToExtent(SpatialExtent.fromMapCanvas(c), 'linear_minmax', p=0.05)
        c.timedRefresh()


def setBandCombination(mv: MapView, sid, r, g, b):
    assert isinstance(mv, MapView)
    for lyr in mv.layers():
        if isinstance(lyr, QgsRasterLayer) and sid == lyr.customProperty('eotsv/sensor'):
            renderer = lyr.renderer()
            assert isinstance(renderer, QgsMultiBandColorRenderer)
            renderer.setRedBand(r)
            renderer.setGreenBand(g)
            renderer.setBlueBand(b)
            lyr.setRenderer(renderer.clone())
