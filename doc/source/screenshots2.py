from qgis.core import *
from qgis.gui import *
from qgis.PyQt.QtWidgets import *
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import *
from eotimeseriesviewer.tests import initQgisApplication

app = initQgisApplication()
from eotimeseriesviewer.utils import *
from eotimeseriesviewer.main import TimeSeriesViewer
from eotimeseriesviewer.mapvisualization import *
from eotimeseriesviewer.profilevisualization import *
from eotimeseriesviewer.timeseries import *
from eotimeseriesviewer import DIR_REPO, DIR_QGIS_RESOURCES

#DIR_SCREENSHOTS = jp(DIR_REPO, 'screenshots')

DIR_SCREENSHOTS = jp(DIR_REPO, 'doc/source/img/autogenerated2.{}'.format(sys.platform))

os.makedirs(DIR_SCREENSHOTS, exist_ok=True)

DATE_OF_INTEREST = np.datetime64('2014-07-02')

TSV = TimeSeriesViewer()
TSV.show()
TSV.spatialTemporalVis.setMapSize(QSize(300, 150))
QApplication.processEvents()

def widgetScreenshot(widget, path):
    assert isinstance(widget, QWidget)
    QApplication.processEvents()
    rect = widget.rect()
    pixmap = widget.grab()
    #pixmap = QPixmap(rect.size())
    #widget.render(pixmap, QPoint(), QRegion(rect))
    pixmap.save(path, quality=100)



def blankGUI(bn:str):
    path = jp(DIR_SCREENSHOTS, bn)
    widgetScreenshot(TSV.ui, path)

def mapProperties(bn:str):

    path = jp(DIR_SCREENSHOTS, bn)
    d = TSV.ui.dockMapViews
    assert isinstance(d, MapViewDock)
    d.toolBox.setCurrentIndex(0)
    d.setFloating(True)
    d.resize(QSize(250, 275))
    QApplication.processEvents()
    widgetScreenshot(TSV.ui.dockMapViews, path)

    d.setFloating(False)
    s = ""


def rasterLayerProperties(bn:str):
    from eotimeseriesviewer.externals.qps.layerproperties import RasterLayerProperties, VectorLayerProperties

    path = jp(DIR_SCREENSHOTS, bn)


    for l in TSV.mMapLayerStore.mapLayers().values():
        if isinstance(l, QgsRasterLayer):
            canvas = QgsMapCanvas()
            canvas.setDestinationCrs(l.crs())
            canvas.setExtent(l.extent())
            d = RasterLayerProperties(l, canvas)
            d.show()
            d.mOptionsListWidget.setCurrentRow(1)

            widgetScreenshot(d, path)
            break





    pass

def temporalProfiles(bn:str):
    path = jp(DIR_SCREENSHOTS, bn)


    s = ""
    pass


def mapViews(bn:str):

    path = jp(DIR_SCREENSHOTS, bn)
    widgetScreenshot(TSV.ui, path)


if __name__ == '__main__':
    blankGUI('blank_gui.png')


    TSV.createMapView()
    TSV.createMapView()
    TSV.mapViews()[0].setTitle('True Color')
    TSV.mapViews()[1].setTitle('Near Infrared')
    TSV.loadExampleTimeSeries(loadAsync=False)

    vectorLayers = [l for l in QgsProject.instance().mapLayers().values() if isinstance(l, QgsVectorLayer)]
    vlNames = [l.name() for l in vectorLayers]
    # make testdata "exampleEvents" polygon fill-color transparent
    vl = vectorLayers[vlNames.index('exampleEvents')]
    assert isinstance(vl, QgsVectorLayer)
    vl.renderer().symbol().symbolLayer(0).setBrushStyle(Qt.NoBrush)
    QApplication.processEvents()

    for c in TSV.spatialTemporalVis.visibleMaps():
        assert isinstance(c, MapCanvas)
        c.timedRefresh()

        c.stretchToExtent(c.spatialExtent(), 'linear_minmax', p=0.05)

        c.timedRefresh()



    mapProperties('mapviewdock_map.png')
    mapViews('mapviews.png')
    rasterLayerProperties('rasterlayer_properties.png')
    temporalProfiles('temporal_profiles.png')


